start: (let_statement | if_statement)*
let_statement: LET identifier expression
expression: literal | func_call
literal: int | float | TRUE | FALSE | string | function | NIL
func_call: LPAREN identifier expression* RPAREN
if_statement: IF expression LSCOPE func_body RSCOPE (elsif_statement)* else_statement?
elsif_statement: ELSIF expression LSCOPE func_body RSCOPE
else_statement: ELSE LSCOPE func_body RSCOPE

function: LBRACKET function_arguments RBRACKET (LSCOPE func_body RSCOPE | expression )
function_arguments: (identifier default_parameter_value)* (VARARGS identifier)?
default_parameter_value: (ASSIGN expression)?
func_body: (let_statement | if_statement)*
int: SIGN?\d+
float: SIGN?\d+\.\d+
string: "([^\"] | \\\")*"
identifier: [_a-zA-Z]

LET: 'let'
SIGN: [\+-]
TRUE: 'true'
FALSE: 'false'
LPAREN: '('
RPAREN: ')'
LBRACKET: '['
RBRACKET: ']'
LSCOPE: '{'
RSCOPE: '}'
TRUE: 'true'
FALSE: 'false'
NIL: 'nil'
IF: 'if'
ELSIF: 'elsif'
ELSE: 'else'
VARARGS: '@'
ASSIGN: '='
